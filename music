#!/bin/bash
#----------------------------------------------------------------------------------------------------
# Based on https://aur.archlinux.org/packages/playerctl
# Uses https://github.com/UtkarshVerma/scripts/blob/master/formatTime
# Also uses https://github.com/mooow/mooowscripts/blob/master/uscripts/playerctl-cmus
# for cmus support.
#----------------------------------------------------------------------------------------------------
INSTANCE="$BLOCK_INSTANCE";

# Define cursor icons
playIcon="";
pauseIcon=" ⏸";
stopIcon=" ⏹";

# If music player is "Audacious"
if [[ "$(playerctl-cmus -l | grep -o "audacious")" = "audacious" ]]; then
	case $BLOCK_BUTTON in 
		1) audtool playlist-reverse ;;
		2) audtool playback-playpause ;;
		3) audtool playlist-advance ;;
		4) audtool playback-seek-relative 5 ;;
		5) audtool playback-seek-relative -5 ;;
	esac

	playerStatus=$(audtool playback-status);
	songArtist=$(audtool current-song-tuple-data artist);
	songTitle=$(audtool current-song-tuple-data title);
	songInfo="$songArtist - $songTitle";
	songDuration=" ($(audtool current-song-output-length)/$(audtool current-song-length))";

# If music player isn't "Audacious"
else
	if [[ "$INSTANCE" != "" ]]; then
		ARGUMENTS="--player $INSTANCE";
	fi

	case $BLOCK_BUTTON in
		1) playerctl-cmus $ARGUMENTS previous ;;
		2) playerctl-cmus $ARGUMENTS play-pause ;;
		3) playerctl-cmus $ARGUMENTS next ;;
		4) [[ ! $(cmus-remote -C status) = "" ]] && cmus-remote -k +5 || playerctl-cmus position 5+ ;;
		5) [[ ! $(cmus-remote -C status) = "" ]] && cmus-remote -k -5 || playerctl-cmus position 5- ;;
	esac

	playerStatus=$(playerctl-cmus $ARGUMENTS status);
	songArtist=$(playerctl-cmus $ARGUMENTS metadata artist);
	songTitle=$(playerctl-cmus $ARGUMENTS metadata title);
	songInfo="$songArtist - $songTitle";
	songDuration="";
	if [[ ! $(cmus-remote -C status) = "" ]]; then
		elapsedTime="$(cmus-remote -C status | sed -n 4p | tr -d -c 0-9)";
		songLength="$(cmus-remote -C status | sed -n 3p | tr -d -c 0-9)";
	else
		elapsedTime=$(playerctl position);
		songLength=$(( `playerctl metadata mpris:length`/1000000 ));
	fi
	if [[ $(playerctl-cmus -l) !="spotify" ]]; then
		songDuration=" (`formatTime ${elapsedTime%.*}`/`formatTime $songLength`)";
	fi
	
if [[ "$songArtist" = "" ]]; then
	songArtist="(Unknown Artist)";
fi

if [[ "${playerStatus^}" = "Paused" ]]; then
	echo "$songInfo$songDuration$pauseIcon";
elif [[ "${playerStatus^}" = "Playing" ]]; then
	echo "$songInfo$songDuration$playIcon";
elif [[ "${playerStatus^}" = "Stopped" ]]; then
	echo "Stopped$stopIcon";
fi