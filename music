#!/bin/bash

#-------------------------------------------------------------------------------------
# MIT License
# Copyright (c) 2018 Utkarsh Verma <utkarshverma@pm.me>
# Permission is hereby granted, free of charge, to any person obtaining a copy 
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#-------------------------------------------------------------------------------------

# Based on https://aur.archlinux.org/packages/playerctl
# Uses https://github.com/UtkarshVerma/scripts/blob/master/formatTime
# Also uses https://github.com/mooow/mooowscripts/blob/master/uscripts/playerctl-cmus
# for cmus support

#-------------------------------------------------------------------------------------
INSTANCE="$BLOCK_INSTANCE";

# Define cursor icons
ICON_PLAY="";
ICON_PAUSE=" ⏸";
ICON_STOP=" ⏹";

# If music player is "Audacious"
if [[ "$(playerctl-cmus -l | grep -o "audacious")" = "audacious" ]]; then
	case $BLOCK_BUTTON in 
		1) audtool playlist-reverse ;;
		2) audtool playback-playpause ;;
		3) audtool playlist-advance ;;
		4) audtool playback-seek-relative 5 ;;
		5) audtool playback-seek-relative -5 ;;
	esac

	PLAYER_STATUS=$(audtool playback-status);
	SONG_ARTIST=$(audtool current-song-tuple-data artist);
	SONG_TITLE=$(audtool current-song-tuple-data title);
	SONG_INFO="$SONG_ARTIST - $SONG_TITLE";
	SONG_DURATION=" ($(audtool current-song-output-length)/$(audtool current-song-length))";

# If music player isn't "Audacious"
else
	if [[ "$INSTANCE" != "" ]]; then
		ARGUMENTS="--player $INSTANCE";
	fi

	case $BLOCK_BUTTON in
		1) playerctl-cmus $ARGUMENTS previous ;;
		2) playerctl-cmus $ARGUMENTS play-pause ;;
		3) playerctl-cmus $ARGUMENTS next ;;
		4) [[ ! $(cmus-remote -C status) = "" ]] && cmus-remote -k +5 || playerctl-cmus position 5+ ;;
		5) [[ ! $(cmus-remote -C status) = "" ]] && cmus-remote -k -5 || playerctl-cmus position 5- ;;
	esac

	PLAYER_STATUS=$(playerctl-cmus $ARGUMENTS status);
	SONG_ARTIST=$(playerctl-cmus $ARGUMENTS metadata artist);
	SONG_TITLE=$(playerctl-cmus $ARGUMENTS metadata title);
	SONG_INFO="$SONG_ARTIST - $SONG_TITLE";
	SONG_DURATION="";
	if [[ ! $(cmus-remote -C status) = "" ]]; then
		SONG_TIME="$(cmus-remote -C status | sed -n 4p | tr -d -c 0-9)";
		SONG_LENGTH="$(cmus-remote -C status | sed -n 3p | tr -d -c 0-9)";
	else
		SONG_TIME=$(playerctl position);
		SONG_LENGTH=$(( `playerctl metadata mpris:length`/1000000 ));
	fi
	SONG_DURATION=" (`formatTime ${SONG_TIME%.*}`/`formatTime $SONG_LENGTH`)";
fi

if [[ "$SONG_ARTIST" = "" ]]; then
	SONG_ARTIST="(Unknown Artist)";
fi

if [[ "${PLAYER_STATUS^}" = "Paused" ]]; then
	CUR_ICON=$ICON_PAUSE;
	echo "$SONG_INFO$SONG_DURATION$CUR_ICON";
elif [[ "${PLAYER_STATUS^}" = "Playing" ]]; then
	CUR_ICON=$ICON_PLAY;
	echo "$SONG_INFO$SONG_DURATION$CUR_ICON";
elif [[ "${PLAYER_STATUS^}" = "Stopped" ]]; then
	CUR_ICON=$ICON_STOP;
	echo "Stopped$CUR_ICON";
fi